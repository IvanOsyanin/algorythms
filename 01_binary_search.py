from typing import List, Optional, Union


def binary_search(
    arr: List[Union[int, float]],
    target: Union[int, float]
) -> Optional[int]:
    """–ê–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n)
    –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(1)
    """
    low, high = 0, len(arr) - 1

    while low <= high:
        mid = (high + low) // 2

        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return None


def binary_search_recursive(
    arr: List[Union[int, float]],
    target: Union[int, float],
    low: int = 0,
    high: Optional[int] = None
) -> Optional[int]:
    """–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n)
    –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: O(log n) –∏–∑-–∑–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    """
    if high is None:
        high = len(arr) - 1

    if low > high:
        return None

    mid = (low + high) // 2

    if arr[mid] == target:
        return mid
    elif arr[mid] < target:
        return binary_search_recursive(arr, target, mid + 1, high)
    else:
        return binary_search_recursive(arr, target, low, mid - 1)


def test_binary_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    arr = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    assert binary_search(arr, -1) == 0
    assert binary_search(arr, 0) == 1
    assert binary_search(arr, 1) == 2
    assert binary_search(arr, 2) == 3
    assert binary_search(arr, 4) == 5
    assert binary_search(arr, 8) == 9
    assert binary_search(arr, 9) == 10

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    assert binary_search(arr, 10) is None
    assert binary_search(arr, -2) is None
    assert binary_search(arr, 5.5) is None

    print("‚úì –û–±—ã—á–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    assert binary_search_recursive(arr, -1) == 0
    assert binary_search_recursive(arr, 0) == 1
    assert binary_search_recursive(arr, 1) == 2
    assert binary_search_recursive(arr, 2) == 3
    assert binary_search_recursive(arr, 4) == 5
    assert binary_search_recursive(arr, 8) == 9
    assert binary_search_recursive(arr, 9) == 10

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
    assert binary_search_recursive(arr, 10) is None
    assert binary_search_recursive(arr, -2) is None
    assert binary_search_recursive(arr, 5.5) is None

    print("‚úì –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤:")

    # –ú–∞—Å—Å–∏–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    single_arr = [42]
    assert binary_search(single_arr, 42) == 0
    assert binary_search(single_arr, 41) is None
    assert binary_search_recursive(single_arr, 42) == 0
    assert binary_search_recursive(single_arr, 41) is None

    # –ú–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    two_arr = [1, 3]
    assert binary_search(two_arr, 1) == 0
    assert binary_search(two_arr, 3) == 1
    assert binary_search(two_arr, 2) is None
    assert binary_search_recursive(two_arr, 1) == 0
    assert binary_search_recursive(two_arr, 3) == 1
    assert binary_search_recursive(two_arr, 2) is None

    # –ú–∞—Å—Å–∏–≤ —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º–∏—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    dup_arr = [1, 1, 2, 2, 3, 3]
    # –ú–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–±–æ–π –∏–∑ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è
    assert binary_search(dup_arr, 1) in [0, 1]
    assert binary_search(dup_arr, 2) in [2, 3]
    assert binary_search(dup_arr, 3) in [4, 5]

    print("‚úì –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    test_binary_search()
